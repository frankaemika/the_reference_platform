plug_in {
  port success child("monitor_pose").port("is_inserted")
  port error child("move_to_socket_pose").port("error") or
             child("set_move_configuration").port("error") or
             child("wiggle").port("error") or
             child("wiggle").port("success") or
             child("press").port("error") or
             child("press").port("success")

  clientData {
    description: @{
      This statemachine inserts a plug into a hole. Therefore it first moves to a socket pose.
      Then the robot executes a wiggle motion and presses in the end effector`s z-direction
      to insert the plug. We assume that the plug is inserted when
      the robot pose reaches the hole pose within an tolerance.
    }@;
  }

  parameterType {
    -- parameter for socket motion
    {
      []{
        {[16]float pose;} pose;
        bool point2point;
        float cartesian_velocity_factor;
        float cartesian_acceleration_factor;
        float cartesian_deceleration_factor;
        float q3;
      } poses;
      {
        [6]int K_x;
      } cartesian_impedance;
      {
        [7]int K_theta;
      } joint_impedance;
      {
        [7]float lower_torque_thresholds_nominal;
        [7]float upper_torque_thresholds_nominal;
        [7]float lower_torque_thresholds_acceleration;
        [7]float upper_torque_thresholds_acceleration;
        [6]float lower_force_thresholds_nominal;
        [6]float upper_force_thresholds_nominal;
        [6]float lower_force_thresholds_acceleration;
        [6]float upper_force_thresholds_acceleration;
      } safety;
      int controller_mode;
    } socket_motion;
    -- wiggle motion for insertion
    {
      [6]{
        int type;
        float a_0;
        [5]float a_n;
        [5]float b_n;
        float T_fourier;
      } profiles;
      float duration;
      int frame_selection;
      float safety_distance_x;
      float safety_distance_y;
      float safety_distance_z;
      float safety_distance_theta;
    } wiggle_motion;
    -- force profile for insertion
    {
      [6]float F_d;
      float duration;
      float safety_distance_x;
      float safety_distance_y;
      float safety_distance_z;
      float safety_distance_theta;
      float force_tolerance;
    } force;
    -- move configuration during the actual insertion: high collision thresholds,
    -- low stiffness (depends on high-level parameter impedance_factor)
    {
      -- cartesian impedance during insertion
      {
        [6]int K_x;
      } cartesian_impedance;
      -- joint impedance during insertion, affecting nullspace if a cartesian controller is used
      {
        [7]int K_theta;
      } joint_impedance;
      {
        [7]float lower_torque_thresholds_nominal;
        [7]float upper_torque_thresholds_nominal;
        [7]float lower_torque_thresholds_acceleration;
        [7]float upper_torque_thresholds_acceleration;
        [6]float lower_force_thresholds_nominal;
        [6]float upper_force_thresholds_nominal;
        [6]float lower_force_thresholds_acceleration;
        [6]float upper_force_thresholds_acceleration;
      } safety;
    } insertion_move_configuration;
    -- end effector pose when plug is inserted
    [16]float hole_pose;
    -- tolerance between the end effector pose
    -- and hole pose to check if plug is successfully inserted [m]
    [3]float tolerance;
  }

  resultType {
    string error_cause;
  }

  --> move_to_socket_pose <- move_via_with_move_configuration {
    port success -> set_move_configuration
  } where parameter.socket_motion

  -- set collisions thresholds and stiffness for the actual insertion
  set_move_configuration <- set_move_configuration {
    port success -> insert
  } where parameter.insertion_move_configuration

  -- Execute the wiggle motion, apply force in end effector's z direction
  -- and monitor end effector pose in parallel. If hole pose is not reached
  -- after a certain amount of time, the plug in state machine failed. Otherwise
  -- we assume the plug is inserted and the state machine finishes with success.
  barrier insert {
    -> wiggle
    -> press
    -> monitor_pose
  }

  -- Execution of the wiggle motion. The robot follows a fourier profile.
  wiggle <- move_velocity {
  } where parameter.wiggle_motion

  -- Apply force in end effector's z-direction for a certain amount of time.
  press <- apply_force {
  } where parameter.force

  -- Monitor current end effector pose and check if hole pose is reached within an tolerance.
  -- If hole pose is reached we assume that the plug is successfully inserted
  monitor_pose {
    port is_inserted result~=nil and result

    parameterType{
      [16]float target_pose;
      [3]float tolerance;
    }

    resultType bool

    action service("robot").event("sensor_data") ~= nil @{
      local current = service("robot").event("sensor_data").O_T_EE.pose
      local x = abs(parameter.target_pose[13] - current[13])
      local y = abs(parameter.target_pose[14] - current[14])
      local z = abs(parameter.target_pose[15] - current[15])
      if x < parameter.tolerance[1] and y < parameter.tolerance[2] and z < parameter.tolerance[3] then
        setResult(true)
      end
    }@
  } where {
    target_pose: parameter.hole_pose;
    tolerance: parameter.tolerance;
  }

  -- Check for triggered ports and set result accordingly.

  action child("move_to_socket_pose").port("error") @{
    setResult({error_cause = child("move_to_socket_pose").result.error_cause})
  }@

  action child("set_move_configuration").port("error") @{
    setResult({error_cause = child("set_move_configuration").result.error_cause})
  }@

  action child("wiggle").port("error") @{
    setResult({error_cause = child("wiggle").result.error_cause})
  }@

  action child("press").port("success") @{
    setResult({error_cause = "Insertion failed: Timeout."})
  }@

  action child("wiggle").port("success") @{
    setResult({error_cause = "Insertion failed: Timeout."})
  }@

  action child("press").port("error") @{
    setResult({error_cause = child("press").result.error_cause})
  }@

}

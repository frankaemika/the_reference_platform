plug_in_app {
port Success child("plug_in").port("success")
port Error child("plug_in").port("error") or
           child("convert").port("error")

  clientData {
    type : "app";
    name : "Plug In";
    color : "hsl(230, 55%, 82%)";
    description: @{
      This app inserts a plug into a hole. It gets high-level parameter from desk
      and calls the plug-in-wrapper for converting parameters and inserting the plug.
    }@;
    requiredParameters: [
      { source: safety; localParameter: safety; }
    ];
    image: @{
      <svg><use xlink:href="bundles/ride_tutorial/logo.svg#icon"></use></svg>
    }@;
    contextMenu: @{
      <step id="plug-in-poses" name="Plug-in motion" style="display: grid">
        <style>
          .network-cable {
            width: 80px;
            height: 70px;
          }
          .network-box {
            width: 80px;
            height: 80px;
          }
        </style>
        <div style="display: grid; grid-column-gap: 170px; grid-row-gap: 20px;">
          <step id="socket" name="Contact with input"
            label="Establish contact with the top part of the input"
            style="grid-column: 1; grid-row: 1;">
            <robot-pose params="
              step: step,
              path: path,
              pose: parameter('socket_pose'),
              relatedPoses: {
                socketPose: parameter('socket_pose'),
                holePose: parameter('hole_pose'),
              },
              componentProviderAPI: componentProviderAPI
            ">
              <div id="socket-content" top="60px" left="90px" class="relative" style="width: 80px; height: 130px;">
                <svg class="center-bottom network-box static-light-gray visible"><use xlink:href="bundles/base/icons/cube.svg#icon"></use></svg>
                <svg class="center-top network-cable">
                  <use xlink:href="bundles/ride_tutorial/plug.svg#icon"></use>
                </svg>
              </div>
            </robot-pose>
          </step>
          <step id="hole" name="Plug insert" label="Insert the plug so that it reaches its desired position"
            style="grid-column: 1; grid-row: 2; justify-content: center; align-items: flex-start;">
            <robot-pose params="
              step: step,
              path: path,
              pose: parameter('hole_pose'),
              reference: true,
              isBottomRightFirst: false,
              relatedPoses: {
                socketPose: parameter('socket_pose'),
                holePose: parameter('hole_pose'),
              },
              componentProviderAPI: componentProviderAPI
            ">
              <div id="hole-content" top="105px" left="40px" class="relative" style="width: 80px; height: 130px;">
                <svg class="center-bottom network-box static-light-gray">
                  <use xlink:href="bundles/base/icons/cube.svg#icon"></use>
                </svg>
                <svg class="center-top network-cable" style="height: 45px; top: 25px">
                  <use xlink:href="bundles/ride_tutorial/plug-inserted.svg#icon"></use>
                </svg>
              </div>
            </robot-pose>
          </step>
        </div>
      </step>
      <step id="parameter" name="Parameter" label="Parameter" class="flex-column">
          <step id="set-duration" name="Duration" class="flex-column" label="Duration">
            <h2 data-bind="text: step.label"></h2>
            <arc-slider params="
              value: parameter('duration'),
              initial: 5,
              fullValue: 20,
              unit: 's',
              step: step
            "/>
          </step>
          <step id=set-tolerance name="Set tolerance" label="Set Tolerance to Target in Z Direction" class="flex-column">
            <h2 data-bind="html: step.label"></h2>
            <linear-slider params="
              value: parameter('tolerance[2]'),
              initial: 0.0005,
              increment: 0.0001,
              max: 0.001,
              min: 0,
              unit: 'm',
              step: step
            "/>
          </step>
      </step>
      <step id="expert-param" name="Expert Parameter" label="Expert Parameter" class="flex-column"
          if="true"><!-- Set to false for demonstration -->
          <style>
            #search-param step {
              visibility: visible;
            }
          </style>
          <step id="set-force" name="Force" class="flex-column" label="Force">
            <h2 data-bind="text: step.label"></h2>
            <linear-slider params="
              value: parameter('plug_in_params.F_z'),
              initial: 10,
              increment: 0.1,
              max: 50,
              unit: 'N',
              step: step
            "></linear-slider>
          </step>
          <step id="set-amplitude-translation" name="Translational Amplitude Factor" class="flex-column" label="Translational Amplitude Factor">
            <h2 data-bind="text: step.label"></h2>
            <linear-slider params="
              value: parameter('plug_in_params.amplitude_factor_translation'),
              initial: 0.89,
              increment: 0.01,
              max: 3,
              step: step
            "></linear-slider>
          </step>
          <step id="set-amplitude-rotation" name="Rotational Amplitude Factor" class="flex-column" label="Rotational Amplitude Factor">
            <h2 data-bind="text: step.label"></h2>
            <linear-slider params="
              value: parameter('plug_in_params.amplitude_factor_rotation'),
              initial: 0.89,
              increment: 0.01,
              max: 3,
              step: step
            "></linear-slider>
          </step>
          <step id="set-impedance" name="Impedance Factor" class="flex-column" label="Impedance Factor">
            <h2 data-bind="text: step.label"></h2>
            <linear-slider params="
              value: parameter('plug_in_params.impedance_factor'),
              initial: 7,
              increment: 0.01,
              max: 10,
              step: step
            "></linear-slider>
          </step>
        </step>
    }@;
  }

  parameterType {
    -- safety parameters, received from timeline
    {
      {
        float x;
        float y;
        float z;
        float x_rot;
        float y_rot;
        float z_rot;
      } force_thresholds;
      {
        float j0;
        float j1;
        float j2;
        float j3;
        float j4;
        float j5;
        float j6;
      } torque_thresholds;
    } safety;
    -- pose of socket
    {
      [16]float pose;
      []float joint_angles;
    } socket_pose;
    -- end effector pose when plug is inserted
    {
      [16]float pose;
      []float joint_angles;
    } hole_pose;
    {
      -- parameter for wiggle motion
      float amplitude_factor_translation;
      float amplitude_factor_rotation;
      -- stiffness of robot during insertion
      float impedance_factor;
      -- insertion force in z direction of robot's end-effector frame [N]
      float F_z;
    } plug_in_params;
    -- tolerance between the end effector pose
    -- and hole pose to check if plug is successfully inserted [m]
    [3]float tolerance;
    -- maximum insertion time [s]
    float duration;
  }

  resultType {
    string error_cause;
  }

  -- convert timeline parameters
  --> convert <- convert_safety {
    port success -> plug_in
  } where {
    safety: parameter.safety;
  }

  -- plug_in plug
  plug_in <- plug_in_wrapper {
  } where {
    socket_pose: {
      pose: parameter.socket_pose.pose;
      q3: parameter.socket_pose.joint_angles[3];
    };
    hole_pose: parameter.hole_pose.pose;
    plug_in_params: parameter.plug_in_params;
    duration: parameter.duration;
    tolerance: parameter.tolerance;
    safety: child("convert").result.safety;
  }

  action child("plug_in").port("error") @{
    setResult(child("plug_in").result)
  }@

} where {
  safety: nil;
  socket_pose: nil;
  hole_pose: nil;
  plug_in_params: {
    amplitude_factor_translation: 1.0;
    amplitude_factor_rotation: 1.0;
    impedance_factor: 7.0;
    F_z: 7.0;
  };
  duration: 5.0;
  tolerance: [0.015, 0.015, 0.0007];
}
